# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:$HOME/.local/bin:/usr/local/bin:$PATH

# Path to your Oh My Zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load 
ZSH_THEME="spaceship"

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Plugins
# Custom plugins  added to $ZSH_CUSTOM/plugins/
# - https://github.com/zsh-users/zsh-autosuggestions
# - https://github.com/zsh-users/zsh-syntax-highlighting.git
plugins=(fzf sdk nodenv zsh-autosuggestions zsh-syntax-highlighting)

source $ZSH/oh-my-zsh.sh


# ---------------------------------------------------------------------------
#  USER CONFIGURATION
# ---------------------------------------------------------------------------

export FAVORITE_COMMAND1="{{ .tmux_favorite1 }}"
export FAVORITE_COMMAND2="{{ .tmux_favorite2 }}"
export FAVORITE_COMMAND3="{{ .tmux_favorite3 }}"
export FAVORITE_COMMAND4="{{ .tmux_favorite4 }}"

alias cdd='cd {{ .deploydir }}'
export cdd={{ .deploydir }}

if [[ -f "$HOME/.zshrc.local" ]]; then
  source "$HOME/.zshrc.local"
fi

# ---------------------------------------------------------------------------
#  History
# ---------------------------------------------------------------------------

# Allow multiple sessions to append to one Zsh command history.
setopt APPEND_HISTORY

# Write to the history file immediately, not when the shell exits.
setopt INC_APPEND_HISTORY

# ---------------------------------------------------------------------------
#  Git
# ---------------------------------------------------------------------------

if command -v tig &>/dev/null; then
  alias tiga='tig --all'
fi

# ---------------------------------------------------------------------------
#  Editor
# ---------------------------------------------------------------------------

if hash nvim 2>/dev/null; then
  export EDITOR=nvim
elif hash vim 2>/dev/null; then
  export EDITOR=vim
elif hash vi 2>/dev/null; then 
  export EDITOR=vi
else
  export EDITOR=nano
fi

export SVN_EDITOR=$EDITOR
export GIT_EDITOR=$EDITOR
export VISUAL=$EDITOR
alias vi=$EDITOR

# ---------------------------------------------------------------------------
#  Tmux
# ---------------------------------------------------------------------------

# Function to set tmux window title
function set_tmux_title {
    if [[ -n "$TMUX" ]]; then
        tmux rename-window "$1"
    fi
}

# SSH wrapper to change the tmux title locally
function ssh() {
    if [[ -n "$TMUX" ]]; then
        # Save the original tmux window title
        original_title=$(tmux display-message -p '#W')
    fi

    # Change tmux title before connecting
    set_tmux_title "SSH $1"

    # Run the actual ssh command with all arguments
    command ssh "$@"

    # Restore the original tmux window title after disconnecting
    if [[ -n "$TMUX" ]]; then
        set_tmux_title "$original_title"
        tmux set-window-option automatic-rename on
    fi
}

# ---------------------------------------------------------------------------
#  Fzf
# ---------------------------------------------------------------------------

if command -v fzf &>/dev/null; then

    __fzf_cd__ () {
        local cmd dir
        cmd="${FZF_ALT_C_COMMAND:-"command find -L . -mindepth 1 \\( -path '*/\\.*' -o -fstype 'sysfs' -o -fstype 'devfs' -o -fstype 'devtmpfs' -o -fstype 'proc' \\) -prune -o -type d -print 2> /dev/null | cut -b3-"}"
        dir=$(eval "$cmd" | FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} --reverse $FZF_DEFAULT_OPTS $FZF_ALT_C_OPTS" $(__fzfcmd) +m) && printf 'cd %q' "$dir"
    }

    # quickly find a project
    p(){
        cd {{ .projectdir }} &&  `__fzf_cd__` && [[ -d ".git" ]] && git fetch 
    }
fi


# ---------------------------------------------------------------------------
#  Sdkman
# ---------------------------------------------------------------------------

export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"


# ---------------------------------------------------------------------------
#  Maven
# ---------------------------------------------------------------------------

if command -v mvn &>/dev/null; then
    if [ -f "{{ .java_truststore_file }}" ]; then
        alias m='mvn -Djavax.net.ssl.trustStore={{ .java_truststore_file }} -Djavax.net.ssl.trustStorePassword={{ .java_truststore_password }}'
    else
        alias m='mvn'
    fi
    alias mvnp='m -Dmaven.test.skip -Dmaven.javadoc.skip=true -DskipMunitTests clean package'
    alias mvnd='m -Dmaven.test.skip -Dmaven.javadoc.skip=true deploy -P profile-nexus'
    alias mvni='m -Dmaven.test.skip -Dmaven.javadoc.skip=true clean install'
    
    function mbump() {
        if [ $# -eq 0 ]; then
            echo "Usage: mbump <version> (means -SNAPSHOT) or mbump <version> <kind> (kind is R or S)"
        else
            if [ $# -gt 1 ] && [ "$2" = "R" ]; then
                kind="RELEASE"
            else
                kind="SNAPSHOT"
            fi
            mvn versions:set -DgenerateBackupPoms=false -DnewVersion="$1-$kind"
        fi
    }

    # copy maven artifact
    alias d="python3 ~/.local/bin/deploy.py '$cdd'"
fi
